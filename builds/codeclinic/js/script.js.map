{"version":3,"sources":["script.js"],"names":["$","OCCUPIED","FREE","columnNames","numColumns","allSolutions","logging","solutionsQty","currentSolution","Board","width","lastRow","columns","Array","numberOfDiagonals","diagDown","diagUp","solutions","index","position","tryNewQueen","row","column","console","log","diagDownIndex","diagonalUpIndex","push","slice","rowIndex","length","solution","line","colIndex","myBoard","document","querySelector","innerHTML","singleSolution","displaySolution","solutionId","style","fill","clearBoard","addEventListener","e","target","tagName"],"mappings":"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","file":"script.js","sourcesContent":["$(function() {\n  'use strict';\n\n  /* Based on: \n    http://code.activestate.com/recipes/578497-eight-queen-problem-javascript/\n    By Thomas Lehmann\n  */\n\n  var OCCUPIED = 1; // field is in use\n  var FREE = 0; // field is not in use\n  var columnNames = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n  var numColumns = 8;\n  var allSolutions = [];\n  var logging = false;\n  var solutionsQty;\n  var currentSolution = 0;\n\n  function Board() {\n\n    this.width = numColumns;\n    this.lastRow = this.width - 1;\n    this.columns = new Array(this.width);\n\n    var numberOfDiagonals = 2 * this.width - 1;\n    this.diagDown = new Array(numberOfDiagonals);\n    this.diagUp = new Array(numberOfDiagonals);\n    this.solutions = [];\n\n    for (var index = 0; index < numberOfDiagonals; ++index) {\n      if (index < this.width) {\n        this.columns[index] = -1;\n      }\n      this.diagDown[index] = FREE;\n      this.diagUp[index] = FREE;\n    }\n    this.position = numColumns;\n\n\n    // searches for all possible solutions\n    this.tryNewQueen = function(row) {\n      for (var column = 0; column < numColumns; column++) {\n        logging && console.log('-----------');\n        logging && console.log('Pos: ' + columnNames[row] + (column + 1));\n        // current column blocked?\n        if (this.columns[column] >= 0) {\n          logging && console.log('column blocked');\n          continue;\n        }\n\n        // relating diagonale '\\' depending on current row and column\n        var diagDownIndex = row + column;\n        if (this.diagDown[diagDownIndex] === OCCUPIED) {\n          logging && console.log('diagDown occupied');\n          continue;\n        }\n\n        // relating diagonale '/' depending on current row and column\n        var diagonalUpIndex = this.position - 1 - row + column;\n        if (this.diagUp[diagonalUpIndex] === OCCUPIED) {\n          logging && console.log('diagUp occupied');\n          continue;\n        }\n\n        // occupying column and diagonals depending on current row and column\n        this.columns[column] = row;\n        this.diagDown[diagDownIndex] = OCCUPIED;\n        this.diagUp[diagonalUpIndex] = OCCUPIED;\n\n        if (row === (this.width - 1)) {\n          this.solutions.push(this.columns.slice(0));\n          logging && console.log('================= SUCCESS =================');\n          logging && console.log(this.solutions);\n\n          for (var rowIndex = 0; rowIndex < this.solutions.length; ++rowIndex) {\n            var solution = this.solutions[rowIndex];\n            var line = '';\n            for (var colIndex = 0; colIndex < this.solutions.length; ++colIndex) {\n              line += columnNames[colIndex] + (solution[colIndex] + 1 + ' ');\n            }\n            logging && console.log(line);\n          }\n        } else {\n          this.tryNewQueen(row + 1);\n        }\n\n        this.columns[column] = -1;\n        logging && console.log('<========== BACKTRACKING');\n        this.diagDown[diagDownIndex] = FREE;\n        this.diagUp[diagonalUpIndex] = FREE;\n      }\n    };\n  }\n\n  var myBoard = new Board();\n  myBoard.tryNewQueen(0);\n  solutionsQty = myBoard.solutions.length;\n  document.querySelector('#currentSolution').innerHTML = 1;\n  document.querySelector('#totalSolutions').innerHTML = solutionsQty;\n  logging && console.log('Found ' + myBoard.solutions.length + ' solutions');\n\n  for (var rowIndex = 0; rowIndex < myBoard.solutions.length; ++rowIndex) {\n    var solution = myBoard.solutions[rowIndex];\n    var singleSolution = [];\n    for (var colIndex = 0; colIndex < solution.length; ++colIndex) {\n      singleSolution.push(columnNames[colIndex] + (solution[colIndex] + 1));\n    }\n    allSolutions.push(singleSolution);\n  }\n\n  logging && console.log(allSolutions);\n\n  function displaySolution(solutionId) {\n    for (var index = 0; index < allSolutions[solutionId].length; index++) {\n      document.querySelector('#' + allSolutions[solutionId][index] + ' .queen').style.fill = '#D33682';\n    }\n  }\n\n  function clearBoard() {\n    for (var colIndex = 0; colIndex < columnNames.length; colIndex++) {\n      for (var rowIndex = 0; rowIndex < numColumns; rowIndex++) {\n        document.querySelector('#' + columnNames[colIndex] + (rowIndex + 1) + ' .queen').style.fill = 'transparent';\n      }\n    }\n  }\n\n  displaySolution(currentSolution);\n\n  // Events\n  document.querySelector('#previous').addEventListener('click', function(e) {\n    console.log('this');\n    currentSolution--;\n    if (currentSolution < 1) {\n      currentSolution = allSolutions.length - 1;\n    }\n    clearBoard();\n    document.querySelector('#currentSolution').innerHTML = currentSolution + 1;\n    displaySolution(currentSolution);\n  });\n\n  document.querySelector('#next').addEventListener('click', function(e) {\n    currentSolution++;\n    if (currentSolution > allSolutions.length - 1) {\n      currentSolution = 0;\n    }\n    clearBoard();\n    document.querySelector('#currentSolution').innerHTML = currentSolution + 1;\n    displaySolution(currentSolution);\n  });\n\n  document.querySelector('#Board').addEventListener('click', function(e) {\n    if (e.target.tagName === 'path') {\n      if (e.target.style.fill === 'rgb(211, 54, 130)') {\n        e.target.style.fill = 'transparent';\n      } else {\n        e.target.style.fill = 'rgb(211, 54, 130)';\n      }\n    }\n  }, false);\n}); // page loaded"]}